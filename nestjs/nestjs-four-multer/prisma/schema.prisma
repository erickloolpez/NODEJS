// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    Int      @id @default(autoincrement()) @map("user_id")
  username   String   @map("username") @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  dictionaries Dictionary[]
  stories      Story[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Dictionary {
  dictionary_id   Int      @id @default(autoincrement()) @map("dictionary_id")
  user_id         Int      @map("user_id")
  dictionary_name String?  @map("dictionary_name") @db.VarChar(255)
  description     String?  @db.Text
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  words   Word[]
  stories Story[]

  @@index([user_id], map: "idx_dictionaries_user")
  @@map("dictionaries")
}

model Word {
  word_id       Int      @id @default(autoincrement()) @map("word_id")
  dictionary_id Int      @map("dictionary_id")
  word          String   @db.VarChar(255)
  relation      String   @db.Text
  created_at    DateTime @default(now()) @map("created_at")

  // Relations
  dictionary Dictionary @relation(fields: [dictionary_id], references: [dictionary_id], onDelete: Cascade)

  @@index([dictionary_id], map: "idx_words_dictionary")
  @@map("words")
}

model Story {
  story_id      Int      @id @default(autoincrement()) @map("story_id")
  user_id       Int      @map("user_id")
  dictionary_id Int      @map("dictionary_id")
  story_title   String?  @map("story_title") @db.VarChar(255)
  story         String   @db.Text
  character     String?  @db.VarChar(255)
  place         String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user       User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  dictionary Dictionary @relation(fields: [dictionary_id], references: [dictionary_id], onDelete: Cascade)

  @@index([user_id], map: "idx_stories_user")
  @@index([dictionary_id], map: "idx_stories_dictionary")
  @@map("stories")
}
