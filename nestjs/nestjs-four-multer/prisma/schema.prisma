// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    Int      @id @default(autoincrement()) @map("user_id")
  username   String?  @map("username") @db.VarChar(255)
  password   String   @map("password") @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  associations Association[] // Un usuario tiene muchas asociaciones
  storyDetails StoryDetails[] // Un usuario también crea los detalles de sus historias

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Association {
  association_id Int      @id @default(autoincrement()) @map("association_id")
  user_id        Int      @map("user_id") // Foreign key to User
  word           String   @db.VarChar(255) // El nombre de la palabra/asociación
  relation       String   @db.Text // La descripción o relación de la palabra
  created_at     DateTime @default(now()) @map("created_at")

  // Relations
  user             User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  storyAssocations StoryAssociation[] // Una asociación puede estar en muchas StoryAssociation (intersección)

  @@index([user_id], map: "idx_associations_user")
  @@map("associations")
}

model StoryDetails {
  story_details_id Int      @id @default(autoincrement()) @map("story_details_id")
  user_id          Int      @map("user_id") // El usuario que creó esta historia
  title            String   @db.VarChar(255)
  place            String?  @db.VarChar(255) // Lugar
  character        String?  @db.VarChar(255) // Personaje
  story_text       String   @db.Text // ¡La historia completa se guarda aquí!
  created_at       DateTime @default(now()) @map("created_at")
  updated_at       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user              User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  storyAssociations StoryAssociation[] // Los detalles de una historia se pueden componer de muchas asociaciones

  @@map("story_details") // Renombramos la tabla 'headers' a 'story_details'
}

model StoryAssociation {
  story_association_id Int @id @default(autoincrement()) @map("story_association_id")
  story_details_id     Int @map("story_details_id") // Foreign key to StoryDetails
  association_id       Int @map("association_id") // Foreign key to Association

  // Relations
  storyDetails StoryDetails @relation(fields: [story_details_id], references: [story_details_id], onDelete: Cascade)
  association  Association  @relation(fields: [association_id], references: [association_id], onDelete: Cascade)

  @@unique([story_details_id, association_id], map: "unique_story_association_order")
  @@map("story_associations") // Esta es tu nueva tabla de intersección
}
